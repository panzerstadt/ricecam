{"version":3,"sources":["components/Camera/Show.module.css","logo.svg","components/customHooks/useInterval.js","components/Camera/Camera.js","components/Camera/index.js","components/Camera/Show.js","components/Database/lib/firebase.js","components/BrightnessPredictor/index.js","components/atoms/index.js","components/RiceCam/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","gallery","__webpack_require__","p","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","WebcamComponent","_ref","onRef","webcamRef","_useState","useState","_useState2","Object","slicedToArray","cameraReady","setCameraReady","setupCamera","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee","e1","wrap","_context","prev","next","navigator","mediaDevices","getUserMedia","_this","setState","error_messages","video","onloadedmetadata","stop","apply","this","arguments","react_default","createElement","react_webcam_default","audio","ref","screenshotFormat","Camera","Gallery","data","className","styles","map","v","i","key","src","alt","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","reactConfig","keys","concat","firebase","apps","length","initializeApp","loadModel","tf","abrupt","sent","predictBrightness","_callee2","rgbarray","model","_context2","xs","Array","from","inputXS","preds","predict","print","arraySync","_x","isBright","canvas","clrs","flat","res","getContext","getImageData","width","height","console","log","CameraComponent","videoRef","setVideoRef","_useState3","_useState4","isDay","setIsDay","_useState5","_useState6","detectionDelay","_useState7","_useState8","isDetecting","setIsDetecting","detect","_useState9","_useState10","setDelay","_useState11","_useState12","isCapturing","setIsCapturing","capture","bright","document","videoWidth","videoHeight","drawImage","_useState13","_useState14","setData","_useState15","_useState16","rgb","setRGB","context","b64","toDataURL","toConsumableArray","clearRect","domOBJ","arr","push","convertToArray","style","backgroundColor","components_Camera","onClick","setTimeout","content","fileName","undefined","contentType","file","Blob","type","href","URL","createObjectURL","download","click","JSON","stringify","Camera_Gallery","App","RiceCam","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b086adf7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gallery\":\"Show_gallery__34GpT\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect, useRef } from \"react\";\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default useInterval;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Webcam from \"react-webcam\";\n\nconst WebcamComponent = ({ onRef }) => {\n  const webcamRef = useRef();\n  const [cameraReady, setCameraReady] = useState(false);\n  const setupCamera = async () => {\n    // MDN: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices\n    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n      const e1 =\n        \"Browser API navigator.mediaDevices.getUserMedia not available\";\n      this.setState({ error_messages: e1 });\n      throw e1;\n    }\n\n    const video = webcamRef.current.video;\n    video.onloadedmetadata = () => {\n      setCameraReady(true);\n    };\n  };\n\n  useEffect(() => {\n    setupCamera();\n  }, [webcamRef]);\n\n  if (cameraReady) {\n    onRef && onRef(webcamRef);\n  }\n\n  return <Webcam audio={false} ref={webcamRef} screenshotFormat=\"image/jpeg\" />;\n};\n\nexport default WebcamComponent;\n","import Camera from \"./Camera\";\nimport Show from \"./Show\";\n\nexport default Camera;\nexport const Gallery = Show;\n","import React from \"react\";\n\nimport styles from \"./Show.module.css\";\n\nconst Gallery = ({ data }) => {\n  // receives b64 streams and\n\n  return (\n    <div className={styles.gallery}>\n      {data &&\n        data.map((v, i) => {\n          return <img key={i} src={v} alt=\"img\" />;\n        })}\n    </div>\n  );\n};\n\nexport default Gallery;\n","import firebase from \"firebase\";\n\nconst config = {\n  apiKey: process.env.apiKey,\n  authDomain: process.env.authDomain,\n  databaseURL: process.env.databaseURL,\n  projectId: process.env.projectId,\n  storageBucket: process.env.storageBucket,\n  messagingSenderId: process.env.messagingSenderId\n};\n\nconst reactConfig = {};\nObject.keys(config).map(v => {\n  reactConfig[v] = process.env[`REACT_APP_${v}`];\n});\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(reactConfig);\n}\n\nexport default firebase;\n//module.exports = firebase;\n","import * as tf from \"@tensorflow/tfjs\";\n\nconst WIDTH = 12;\nconst HEIGHT = 9;\nconst ARR_LENGTH = 432;\n\nconst loadModel = async () => {\n  return await tf.loadLayersModel(\"assets/model/brightness-predictor.json\");\n};\n\nconst predictBrightness = async rgbarray => {\n  const model = await loadModel();\n\n  if (model) {\n    return await tf.tidy(() => {\n      const xs = [Array.from(rgbarray)];\n      const inputXS = tf.tensor2d(xs, [xs.length, ARR_LENGTH]);\n\n      const preds = model.predict(inputXS);\n\n      preds.print();\n\n      const out = preds.arraySync()[0][0];\n\n      return out;\n    });\n  }\n};\n\nexport default predictBrightness;\n","import { mean, median } from \"d3-array\";\nimport predictBrightness from \"../BrightnessPredictor\";\n\n// sml model learning bright and dark\nexport const isBright = async canvas => {\n  const clrs = canvas\n    .getContext(\"2d\")\n    .getImageData(0, 0, canvas.width, canvas.height);\n\n  const flat = clrs.data;\n  const res = await predictBrightness(flat);\n  console.log(res);\n  return res > 0.6 ? true : false;\n};\n\n//https://stackoverflow.com/questions/34156282/how-do-i-save-json-to-local-text-file\n\nexport const download = (\n  content,\n  fileName = \"json.txt\",\n  contentType = \"text/plain\"\n) => {\n  let a = document.createElement(\"a\");\n  let file = new Blob([content], { type: contentType });\n  a.href = URL.createObjectURL(file);\n  a.download = fileName;\n  a.click();\n};\n\nexport const convertToObject = domOBJ => {\n  let obj = {};\n  for (var p in domOBJ) {\n    obj[p] = domOBJ[p];\n  }\n  return obj;\n};\n\nexport const convertToArray = domOBJ => {\n  let arr = [];\n  for (var p in domOBJ) {\n    arr.push(domOBJ[p]);\n  }\n  return arr;\n};\n","import React, { useState, useEffect, useRef } from \"react\";\n\nimport useInterval from \"../customHooks/useInterval\";\nimport Camera, { Gallery } from \"../Camera\";\nimport { PushToFirebase } from \"../Database\";\n\nimport { isBright, download, convertToArray } from \"../atoms\";\n\nconst SCALE = 1;\nconst RGB_SCALE = 0.02;\n\nconst CameraComponent = () => {\n  const [videoRef, setVideoRef] = useState();\n  const [isDay, setIsDay] = useState(true);\n\n  const [detectionDelay, setDetectionDelay] = useState(500);\n  const [isDetecting, setIsDetecting] = useState(false);\n  useInterval(\n    () => {\n      detect();\n    },\n    isDetecting ? detectionDelay : null\n  );\n\n  const [delay, setDelay] = useState(1000);\n  const [isCapturing, setIsCapturing] = useState(false);\n  useInterval(\n    () => {\n      capture();\n    },\n    isCapturing ? delay : null\n  );\n\n  const detect = async () => {\n    if (videoRef) {\n      let context;\n      const video = videoRef.current.video;\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = video.videoWidth * RGB_SCALE;\n      canvas.height = video.videoHeight * RGB_SCALE;\n\n      context = canvas.getContext(\"2d\");\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // check brightness\n      const bright = await isBright(canvas);\n      bright ? setIsDay(true) : setIsDay(false);\n    }\n  };\n\n  const [data, setData] = useState([]);\n  const [rgb, setRGB] = useState([]);\n  const capture = () => {\n    if (videoRef) {\n      let context;\n      const video = videoRef.current.video;\n      const canvas = document.createElement(\"canvas\");\n\n      canvas.width = video.videoWidth * SCALE;\n      canvas.height = video.videoHeight * SCALE;\n      context = canvas.getContext(\"2d\");\n\n      // full res\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // base64 setstate\n      const b64 = canvas.toDataURL();\n      setData([...data, b64]);\n\n      context.clearRect(0, 0, canvas.width, canvas.height);\n\n      canvas.width = video.videoWidth * RGB_SCALE;\n      canvas.height = video.videoHeight * RGB_SCALE;\n\n      context = canvas.getContext(\"2d\");\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // rgb array (flat)\n      const clrs = context.getImageData(0, 0, canvas.width, canvas.height);\n      console.log(clrs);\n      const flat = convertToArray(clrs.data);\n\n      setRGB([...rgb, flat]);\n      // download(JSON.stringify({ data: flat }), \"temp.json\", \"application/json\");\n\n      return data;\n    }\n  };\n\n  const captureOne = () => {\n    setIsCapturing(true);\n    setTimeout(() => {\n      setIsCapturing(false);\n    }, 1100);\n  };\n\n  const capture5sec = () => {\n    setIsCapturing(true);\n    setTimeout(() => {\n      setIsCapturing(false);\n    }, 5000);\n  };\n\n  const capture5secvideo = () => {\n    setDelay(1);\n    setIsCapturing(true);\n    setTimeout(() => {\n      setIsCapturing(false);\n      setDelay(1000);\n    }, 5000);\n  };\n\n  const downloadAsJson = () => {\n    download(JSON.stringify({ data: rgb }), \"temp.json\", \"application/json\");\n    setData([]);\n    setRGB([]);\n  };\n\n  const sendToDB = () => {\n    // push to firebase\n  };\n\n  return (\n    <div style={{ backgroundColor: isDay ? \"white\" : \"#282c34\" }}>\n      <Camera onRef={setVideoRef} />\n\n      <br />\n      <code>debug buttons: </code>\n      <button onClick={captureOne}>capture</button>\n      <button onClick={capture5sec}>capture5sec</button>\n      <button onClick={capture5secvideo}>capture5sec video</button>\n      <button onClick={downloadAsJson}>download data as json</button>\n      <button onClick={sendToDB}>push to database</button>\n      <button onClick={() => setIsDetecting(!isDetecting)}>\n        toggle detection\n      </button>\n      <br />\n      <br />\n      <Gallery data={data} />\n    </div>\n  );\n};\n\nexport default CameraComponent;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Camera from \"./components/RiceCam\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Camera />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}