{"version":3,"sources":["components/Camera/Show.module.css","components/Camera/useInterval.js","components/Camera/Camera.js","components/Camera/Show.js","components/Camera/index.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["module","exports","gallery","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","WebcamComponent","_ref","onRef","webcamRef","_useState","useState","_useState2","Object","slicedToArray","cameraReady","setCameraReady","setupCamera","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee","e1","wrap","_context","prev","next","navigator","mediaDevices","getUserMedia","_this","setState","error_messages","video","onloadedmetadata","stop","apply","this","arguments","react_default","createElement","react_webcam_default","audio","ref","screenshotFormat","Gallery","data","className","styles","map","v","i","key","src","alt","CameraComponent","videoRef","setVideoRef","_useState3","_useState4","isCapturing","setIsCapturing","_useState5","_useState6","setData","concat","toConsumableArray","capture","canvas","document","width","videoWidth","height","videoHeight","getContext","drawImage","toDataURL","console","log","Fragment","Camera","onClick","setTimeout","Show","App","logo","components_Camera","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","then","registration","unregister","__webpack_require__","p"],"mappings":"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","file":"static/js/main.66a452fe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gallery\":\"Show_gallery__34GpT\"};","import React, { useState, useEffect, useRef } from \"react\";\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default useInterval;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Webcam from \"react-webcam\";\n\nconst WebcamComponent = ({ onRef }) => {\n  const webcamRef = useRef();\n  const [cameraReady, setCameraReady] = useState(false);\n  const setupCamera = async () => {\n    // MDN: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices\n    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n      const e1 =\n        \"Browser API navigator.mediaDevices.getUserMedia not available\";\n      this.setState({ error_messages: e1 });\n      throw e1;\n    }\n\n    const video = webcamRef.current.video;\n    video.onloadedmetadata = () => {\n      setCameraReady(true);\n    };\n  };\n\n  useEffect(() => {\n    setupCamera();\n  }, [webcamRef]);\n\n  if (cameraReady) {\n    onRef && onRef(webcamRef);\n  }\n\n  return <Webcam audio={false} ref={webcamRef} screenshotFormat=\"image/jpeg\" />;\n};\n\nexport default WebcamComponent;\n","import React from \"react\";\n\nimport styles from \"./Show.module.css\";\n\nconst Gallery = ({ data }) => {\n  // receives b64 streams and\n\n  return (\n    <div className={styles.gallery}>\n      {data &&\n        data.map((v, i) => {\n          return <img key={i} src={v} alt=\"img\" />;\n        })}\n    </div>\n  );\n};\n\nexport default Gallery;\n","import React, { useState, useEffect, useRef } from \"react\";\n\nimport useInterval from \"./useInterval\";\nimport Webcam from \"./Camera\";\nimport Show from \"./Show\";\n\nconst SCALE = 1;\n\nconst CameraComponent = () => {\n  const [videoRef, setVideoRef] = useState();\n  const [isCapturing, setIsCapturing] = useState(false);\n  const [data, setData] = useState([]);\n\n  useInterval(\n    () => {\n      setData([...data, capture()]);\n    },\n    isCapturing ? 1000 : null\n  );\n\n  const capture = () => {\n    if (videoRef) {\n      const video = videoRef.current.video;\n      const canvas = document.createElement(\"canvas\");\n\n      canvas.width = video.videoWidth * SCALE;\n      canvas.height = video.videoHeight * SCALE;\n      canvas\n        .getContext(\"2d\")\n        .drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      const data = canvas.toDataURL();\n      console.log(data);\n      return data;\n    }\n  };\n\n  const capture5sec = () => {\n    setIsCapturing(true);\n    setTimeout(() => {\n      setIsCapturing(false);\n    }, 5000);\n  };\n\n  return (\n    <>\n      <Webcam onRef={setVideoRef} />\n\n      <button onClick={capture}>capture</button>\n      <button onClick={capture5sec}>capture5sec</button>\n      <br />\n      <br />\n      <Show data={data} />\n    </>\n  );\n};\n\nexport default CameraComponent;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport WebcamComponent from \"./components/Camera\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n\n        <WebcamComponent />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}